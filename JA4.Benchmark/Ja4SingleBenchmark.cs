using BenchmarkDotNet.Attributes;

namespace JA4.Benchmark;

[MarkdownExporterAttribute.GitHub]
[HtmlExporter]
[MemoryDiagnoser]
public class Ja4SingleBenchmark
{
    public static IEnumerable<object[]> Data()
    {
        yield return new object[]
        {
            "t13d2012h1_2b729b4bf6f3_36bf25f296df",   // Curl (HTTP/1.1)
            new byte[]
            {
                22, 3, 1, 1, 190, 1, 0, 1, 186, 3, 3, 190, 45, 156, 167, 151, 181, 231, 54, 224, 213, 172, 140, 207, 16,
                222, 80, 194, 8, 183, 120, 41, 59, 68, 38, 101, 133, 185, 177, 125, 57, 67, 165, 32, 44, 107, 199, 168,
                226, 213, 169, 57, 181, 73, 136, 74, 139, 13, 251, 243, 17, 44, 13, 163, 142, 129, 235, 63, 186, 158,
                164, 8, 86, 9, 56, 224, 0, 40, 19, 2, 19, 1, 192, 44, 192, 43, 192, 48, 192, 47, 192, 36, 192, 35, 192,
                40, 192, 39, 192, 10, 192, 9, 192, 20, 192, 19, 0, 157, 0, 156, 0, 61, 0, 60, 0, 53, 0, 47, 1, 0, 1, 73,
                0, 0, 0, 14, 0, 12, 0, 0, 9, 108, 111, 99, 97, 108, 104, 111, 115, 116, 0, 43, 0, 9, 8, 3, 4, 3, 3, 3,
                2, 3, 1, 0, 13, 0, 26, 0, 24, 8, 4, 8, 5, 8, 6, 4, 1, 5, 1, 2, 1, 4, 3, 5, 3, 2, 3, 2, 2, 6, 1, 6, 3, 0,
                35, 0, 0, 0, 10, 0, 8, 0, 6, 0, 29, 0, 23, 0, 24, 0, 11, 0, 2, 1, 0, 0, 16, 0, 11, 0, 9, 8, 104, 116,
                116, 112, 47, 49, 46, 49, 0, 51, 0, 208, 0, 206, 0, 29, 0, 32, 242, 97, 90, 37, 165, 176, 37, 245, 161,
                45, 129, 226, 235, 175, 191, 189, 251, 159, 82, 219, 129, 243, 28, 123, 243, 220, 30, 170, 3, 51, 122,
                1, 0, 23, 0, 65, 4, 44, 88, 240, 120, 217, 107, 17, 8, 118, 118, 167, 57, 105, 170, 40, 12, 16, 22, 106,
                126, 64, 200, 18, 156, 68, 54, 31, 71, 49, 10, 225, 90, 97, 162, 102, 13, 216, 145, 65, 160, 120, 215,
                69, 210, 82, 116, 154, 218, 41, 22, 78, 112, 211, 136, 83, 33, 102, 122, 249, 138, 187, 177, 94, 222, 0,
                24, 0, 97, 4, 215, 0, 247, 77, 2, 10, 43, 192, 128, 21, 232, 128, 233, 114, 212, 83, 207, 39, 232, 232,
                98, 242, 38, 12, 195, 197, 118, 55, 208, 167, 75, 208, 196, 67, 87, 150, 38, 139, 65, 142, 127, 179,
                232, 13, 239, 225, 76, 177, 140, 188, 25, 180, 209, 141, 5, 139, 55, 38, 59, 177, 222, 123, 234, 10,
                127, 39, 243, 100, 122, 182, 155, 137, 106, 15, 223, 146, 26, 118, 114, 246, 146, 153, 65, 84, 232, 146,
                114, 19, 158, 234, 209, 230, 182, 17, 210, 90, 0, 49, 0, 0, 0, 23, 0, 0, 255, 1, 0, 1, 0, 0, 45, 0, 2,
                1, 1
            }
        };

        yield return new object[]
        {
            "t13d1516h2_8daaf6152771_d8a2da3f94cd", // Browser (HTTP/2)
            new byte[]
            {
                22, 3, 1, 6, 178, 1, 0, 6, 174, 3, 3, 190, 40, 224, 143, 90, 253, 165, 211, 127, 201, 236, 193, 180,
                235, 199, 97, 167, 13, 82, 138, 196, 84, 30, 207, 15, 101, 207, 194, 11, 90, 130, 13, 32, 56, 141, 21,
                247, 201, 199, 154, 74, 130, 162, 228, 183, 152, 134, 37, 136, 123, 167, 3, 70, 4, 41, 2, 232, 104, 137,
                20, 93, 234, 93, 219, 166, 0, 32, 106, 106, 19, 1, 19, 2, 19, 3, 192, 43, 192, 47, 192, 44, 192, 48,
                204, 169, 204, 168, 192, 19, 192, 20, 0, 156, 0, 157, 0, 47, 0, 53, 1, 0, 6, 69, 42, 42, 0, 0, 254, 13,
                0, 186, 0, 0, 1, 0, 1, 103, 0, 32, 160, 252, 11, 135, 105, 64, 224, 158, 54, 121, 112, 190, 22, 69, 115,
                116, 149, 82, 183, 103, 157, 52, 193, 126, 248, 47, 137, 64, 238, 142, 210, 34, 0, 144, 154, 183, 83,
                144, 140, 226, 228, 81, 20, 56, 138, 200, 3, 251, 170, 149, 175, 246, 191, 0, 170, 168, 172, 209, 105,
                7, 14, 244, 151, 244, 40, 154, 194, 160, 59, 236, 77, 36, 186, 209, 225, 241, 116, 43, 181, 212, 202,
                44, 255, 31, 114, 226, 228, 46, 8, 72, 116, 214, 193, 45, 180, 181, 60, 19, 106, 77, 148, 158, 70, 154,
                132, 94, 211, 9, 105, 97, 100, 181, 158, 225, 119, 254, 240, 93, 176, 18, 144, 181, 205, 42, 49, 241,
                88, 43, 23, 145, 105, 1, 148, 121, 241, 61, 216, 233, 33, 83, 137, 191, 179, 221, 232, 216, 233, 35, 8,
                10, 21, 108, 28, 113, 56, 188, 88, 67, 83, 163, 36, 121, 195, 133, 194, 184, 231, 18, 190, 249, 151,
                113, 23, 58, 225, 0, 129, 140, 0, 11, 0, 2, 1, 0, 0, 27, 0, 3, 2, 0, 2, 0, 51, 4, 239, 4, 237, 170, 170,
                0, 1, 0, 17, 236, 4, 192, 236, 149, 87, 221, 42, 203, 120, 199, 174, 164, 12, 44, 84, 38, 49, 169, 145,
                124, 145, 170, 21, 29, 98, 59, 161, 195, 58, 60, 172, 15, 115, 108, 117, 177, 41, 91, 60, 220, 131, 120,
                245, 148, 85, 167, 126, 32, 231, 177, 224, 252, 88, 124, 185, 105, 79, 186, 94, 35, 149, 52, 29, 71, 2,
                11, 250, 56, 32, 134, 69, 84, 102, 77, 45, 36, 180, 49, 166, 123, 158, 212, 133, 51, 88, 201, 199, 49,
                156, 48, 59, 139, 93, 67, 109, 10, 188, 50, 76, 89, 123, 121, 0, 50, 187, 244, 3, 231, 252, 98, 37, 247,
                54, 106, 140, 73, 74, 19, 69, 221, 197, 184, 245, 36, 207, 245, 70, 80, 162, 7, 177, 22, 112, 28, 19,
                246, 120, 89, 76, 125, 74, 39, 124, 242, 178, 99, 215, 168, 105, 243, 11, 175, 221, 228, 93, 229, 26,
                97, 232, 186, 58, 217, 35, 107, 178, 108, 123, 70, 23, 103, 81, 244, 40, 217, 242, 34, 228, 52, 74, 86,
                41, 129, 44, 198, 1, 0, 28, 8, 10, 87, 52, 47, 75, 146, 70, 195, 57, 247, 153, 93, 73, 200, 13, 98, 248,
                167, 103, 81, 42, 230, 147, 74, 154, 146, 23, 166, 250, 114, 137, 69, 47, 122, 172, 2, 241, 66, 206,
                112, 178, 139, 64, 165, 199, 47, 107, 146, 138, 227, 48, 249, 135, 146, 2, 170, 108, 139, 213, 61, 83,
                41, 176, 95, 138, 139, 98, 246, 65, 178, 38, 120, 66, 133, 184, 32, 227, 88, 138, 130, 71, 96, 220, 101,
                42, 209, 172, 5, 132, 135, 156, 124, 91, 217, 193, 75, 65, 113, 169, 254, 163, 46, 15, 5, 137, 143, 27,
                110, 214, 89, 196, 253, 172, 78, 24, 233, 190, 39, 23, 145, 239, 12, 83, 115, 146, 118, 144, 181, 180,
                76, 4, 49, 180, 204, 96, 164, 217, 163, 37, 224, 154, 56, 242, 113, 16, 179, 49, 89, 35, 103, 206, 5,
                50, 179, 202, 99, 76, 216, 75, 53, 154, 187, 77, 229, 102, 105, 72, 149, 175, 87, 39, 196, 194, 79, 125,
                115, 40, 134, 70, 51, 13, 10, 71, 211, 130, 178, 209, 96, 94, 166, 213, 35, 112, 121, 64, 230, 57, 42,
                65, 76, 152, 58, 201, 183, 212, 33, 71, 80, 215, 164, 161, 28, 123, 150, 164, 74, 19, 246, 60, 77, 166,
                195, 74, 231, 141, 121, 199, 189, 68, 182, 88, 172, 156, 113, 149, 224, 154, 89, 166, 167, 208, 150, 27,
                76, 197, 67, 86, 180, 73, 2, 11, 81, 43, 102, 144, 176, 164, 34, 142, 140, 136, 142, 150, 37, 210, 90,
                206, 158, 0, 90, 80, 19, 174, 249, 140, 107, 102, 90, 70, 39, 27, 111, 228, 122, 130, 226, 2, 75, 120,
                202, 0, 172, 231, 52, 166, 122, 45, 43, 103, 99, 186, 212, 81, 132, 138, 44, 184, 216, 16, 209, 121,
                170, 214, 90, 194, 170, 39, 144, 20, 57, 41, 59, 6, 130, 97, 3, 132, 220, 182, 142, 140, 106, 142, 106,
                21, 73, 14, 187, 130, 152, 168, 206, 82, 65, 54, 124, 180, 71, 183, 20, 192, 136, 162, 11, 32, 230, 144,
                158, 24, 37, 217, 117, 30, 174, 168, 118, 192, 102, 86, 58, 140, 145, 224, 18, 200, 186, 154, 204, 144,
                42, 101, 74, 104, 159, 184, 5, 165, 145, 43, 92, 124, 215, 206, 193, 123, 19, 11, 24, 86, 120, 229, 148,
                192, 183, 154, 21, 135, 104, 214, 23, 62, 53, 74, 6, 57, 106, 62, 247, 172, 130, 210, 97, 65, 82, 92,
                121, 10, 212, 183, 88, 65, 46, 251, 229, 25, 10, 88, 129, 127, 50, 66, 204, 35, 11, 139, 197, 108, 116,
                88, 104, 204, 176, 163, 15, 197, 195, 147, 52, 104, 233, 212, 190, 79, 44, 184, 202, 217, 22, 124, 196,
                56, 81, 201, 97, 159, 235, 140, 19, 26, 135, 243, 27, 60, 143, 55, 81, 84, 108, 74, 64, 51, 200, 118,
                219, 25, 192, 26, 154, 253, 59, 58, 130, 137, 93, 168, 24, 75, 37, 216, 111, 2, 183, 41, 169, 114, 56,
                53, 225, 10, 227, 154, 141, 13, 43, 55, 85, 51, 58, 251, 60, 48, 216, 123, 202, 247, 36, 51, 226, 138,
                173, 230, 162, 38, 253, 34, 206, 192, 43, 117, 250, 53, 197, 165, 120, 156, 56, 145, 39, 203, 96, 38,
                17, 152, 59, 64, 146, 176, 35, 249, 49, 184, 247, 90, 129, 219, 203, 27, 38, 139, 164, 220, 69, 155,
                251, 9, 78, 36, 152, 216, 242, 62, 251, 42, 97, 186, 37, 161, 130, 235, 61, 190, 59, 51, 90, 140, 100,
                177, 167, 80, 102, 172, 35, 107, 171, 155, 69, 123, 179, 253, 202, 84, 88, 68, 21, 48, 43, 149, 80, 160,
                95, 30, 116, 145, 134, 243, 113, 127, 241, 194, 149, 58, 134, 74, 10, 164, 8, 193, 200, 165, 100, 128,
                68, 164, 77, 240, 114, 148, 68, 156, 143, 230, 167, 88, 255, 220, 95, 93, 17, 184, 183, 201, 35, 43,
                224, 143, 128, 231, 58, 219, 218, 170, 2, 86, 18, 93, 150, 144, 76, 36, 120, 96, 97, 168, 199, 104, 132,
                229, 215, 23, 199, 185, 99, 76, 249, 78, 227, 220, 106, 95, 117, 25, 196, 140, 34, 158, 113, 25, 20, 56,
                27, 57, 170, 29, 224, 22, 48, 22, 53, 81, 255, 60, 27, 192, 85, 53, 190, 88, 164, 66, 192, 178, 184, 58,
                133, 214, 167, 147, 36, 161, 39, 192, 179, 56, 56, 213, 41, 132, 130, 195, 207, 167, 42, 186, 117, 81,
                137, 132, 184, 44, 39, 56, 244, 147, 207, 6, 209, 146, 158, 104, 69, 247, 176, 34, 27, 145, 168, 192,
                92, 97, 165, 66, 47, 244, 124, 153, 164, 140, 205, 69, 114, 113, 152, 1, 62, 51, 130, 82, 143, 224, 65,
                194, 117, 123, 185, 133, 158, 56, 209, 206, 109, 26, 161, 1, 151, 200, 142, 176, 39, 176, 37, 124, 202,
                229, 93, 178, 203, 95, 154, 214, 192, 112, 183, 81, 217, 235, 35, 138, 72, 25, 9, 64, 67, 202, 198, 27,
                184, 230, 177, 3, 96, 144, 211, 136, 34, 105, 124, 76, 149, 0, 69, 249, 49, 135, 179, 59, 147, 35, 101,
                156, 255, 50, 22, 165, 234, 203, 244, 244, 200, 44, 144, 148, 70, 168, 115, 163, 145, 136, 129, 218, 7,
                96, 38, 44, 128, 242, 68, 180, 71, 1, 199, 92, 133, 146, 117, 30, 204, 134, 110, 98, 146, 96, 176, 154,
                72, 36, 133, 108, 85, 136, 5, 194, 87, 165, 183, 3, 202, 230, 8, 143, 205, 194, 84, 156, 227, 101, 133,
                88, 170, 53, 140, 165, 178, 200, 63, 239, 108, 119, 9, 104, 72, 169, 168, 76, 78, 196, 12, 69, 36, 154,
                167, 228, 150, 206, 205, 66, 72, 113, 143, 135, 71, 118, 204, 36, 111, 145, 255, 200, 165, 90, 117, 221,
                65, 52, 202, 156, 231, 97, 213, 61, 121, 202, 49, 36, 133, 23, 227, 199, 136, 79, 247, 155, 111, 192,
                35, 76, 220, 143, 177, 158, 167, 147, 8, 5, 223, 124, 240, 183, 118, 72, 112, 0, 29, 0, 32, 133, 141,
                71, 55, 4, 187, 7, 188, 177, 169, 133, 244, 40, 69, 183, 160, 242, 62, 136, 92, 70, 226, 156, 0, 109,
                129, 3, 25, 91, 99, 41, 122, 0, 10, 0, 12, 0, 10, 170, 170, 17, 236, 0, 29, 0, 23, 0, 24, 0, 35, 0, 0,
                0, 16, 0, 14, 0, 12, 2, 104, 50, 8, 104, 116, 116, 112, 47, 49, 46, 49, 0, 5, 0, 5, 1, 0, 0, 0, 0, 0,
                23, 0, 0, 68, 205, 0, 5, 0, 3, 2, 104, 50, 255, 1, 0, 1, 0, 0, 45, 0, 2, 1, 1, 0, 18, 0, 0, 0, 13, 0,
                18, 0, 16, 4, 3, 8, 4, 4, 1, 5, 3, 8, 5, 5, 1, 8, 6, 6, 1, 0, 43, 0, 7, 6, 250, 250, 3, 4, 3, 3, 0, 0,
                0, 14, 0, 12, 0, 0, 9, 108, 111, 99, 97, 108, 104, 111, 115, 116, 186, 186, 0, 1, 0
            }
        };
    }

    [Benchmark(Baseline = true)]
    [ArgumentsSource(nameof(Data))]
    public string Original(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Original.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_1(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_1.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_2_Grease(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_2_Grease.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_3_HashListForJa4(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_3_HashListForJa4.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_4_HashExtensionsForJa4(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_4_HashExtensionsForJa4.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_5_AlpnParsing(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_5_AlpnParsing.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_6_ArrayInsteadOfHashSet(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_6_ArrayInsteadOfHashSet.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }

    [Benchmark]
    [ArgumentsSource(nameof(Data))]
    public string Improved_7_Refactoring(string expectedFingerprint, byte[] bytes)
    {
        var fingerprint = Ja4_Improved_7_Refactoring.EncodeJa4Fingerprint(bytes, bytes.Length);

        if (fingerprint != expectedFingerprint)
        {
            throw new InvalidOperationException();
        }

        return fingerprint;
    }
}
